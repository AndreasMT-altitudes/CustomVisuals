{"version":3,"file":"visual.js","mappings":"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","sources":["webpack:///./src/htmlInjectionUtility.ts","webpack:///./src/settings.ts","webpack:///./src/visual.ts","webpack:///./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js","webpack:///./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js","webpack:///./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjectsParser.js","webpack:///external var \"Function('return this')()\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./.tmp/precompile/visualPlugin.ts"],"sourcesContent":["\"use strict\";\r\nlet injectorCounter: number = 0;\r\nexport function resetInjector(): void {\r\n  injectorCounter = 0;\r\n}\r\n\r\nexport function injectorReady(): boolean {\r\n  return injectorCounter === 0;\r\n}\r\nexport function parseElement(el: HTMLElement, target: HTMLElement): Node[] {\r\n  let arr: Node[] = [];\r\n  if (!el || !el.hasChildNodes()) {\r\n    return;\r\n  }\r\n  let nodes: HTMLCollection = el.children;\r\n  for (let i: number = 0; i < nodes.length; i++) {\r\n    let tempNode: HTMLElement;\r\n    if (nodes.item(i).nodeName.toLowerCase() === \"script\") {\r\n      tempNode = createScriptNode(nodes.item(i));\r\n    } else {\r\n      tempNode = <HTMLElement>nodes.item(i).cloneNode(true);\r\n    }\r\n    target.appendChild(tempNode);\r\n    arr.push(tempNode);\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction createScriptNode(refNode: Element): HTMLElement {\r\n  let script: HTMLScriptElement = document.createElement(\"script\");\r\n  let attr: NamedNodeMap = refNode.attributes;\r\n  for (let i: number = 0; i < attr.length; i++) {\r\n    script.setAttribute(attr[i].name, attr[i].textContent);\r\n    if (attr[i].name.toLowerCase() === \"src\") {\r\n      // waiting only for src to finish loading - async opetation\r\n      injectorCounter++;\r\n      script.onload = () => {\r\n        injectorCounter--;\r\n      };\r\n    }\r\n  }\r\n  // tslint:disable-next-line\r\n  script.innerHTML = refNode.innerHTML;\r\n  return script;\r\n}\r\n\r\nexport function runHTMLWidgetRenderer(): void {\r\n  // rendering HTML which was created by HTMLWidgets package\r\n  // wait till all tje script elements are loaded\r\n  let intervalVar: number = window.setInterval(() => {\r\n    if (injectorReady()) {\r\n      window.clearInterval(intervalVar);\r\n      if (window.hasOwnProperty(\"HTMLWidgets\") && window[\"HTMLWidgets\"].staticRender) {\r\n        window[\"HTMLWidgets\"].staticRender();\r\n      }\r\n    }\r\n  }, 100);\r\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,2\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\n\"use strict\";\n\nimport { dataViewObjectsParser } from \"powerbi-visuals-utils-dataviewutils\";\nimport DataViewObjectsParser = dataViewObjectsParser.DataViewObjectsParser;\n\nexport class VisualSettings extends DataViewObjectsParser {\n  public mySettingsAxes: mySettingsAxes = new mySettingsAxes(); \n  public LowerColumnValue1Format: LowerColumnValue1Format = new LowerColumnValue1Format();\n  public LowerColumnValue2Format: LowerColumnValue2Format = new LowerColumnValue2Format();   \n  public LowerColumnValue3Format: LowerColumnValue3Format = new LowerColumnValue3Format();   \n  public LowerColumnValue4Format: LowerColumnValue4Format = new LowerColumnValue4Format();   \n  public LowerColumnValue5Format: LowerColumnValue5Format = new LowerColumnValue5Format(); \n  public UpperColumnValue1Format: UpperColumnValue1Format = new UpperColumnValue1Format();\n  public UpperColumnValue2Format: UpperColumnValue2Format = new UpperColumnValue2Format();   \n  public UpperColumnValue3Format: UpperColumnValue3Format = new UpperColumnValue3Format();   \n  public UpperColumnValue4Format: UpperColumnValue4Format = new UpperColumnValue4Format();   \n  public UpperColumnValue5Format: UpperColumnValue5Format = new UpperColumnValue5Format();   \n  \n  \n  public rcv_script: rcv_scriptSettings = new rcv_scriptSettings();\n      }\n\nexport class rcv_scriptSettings {\n  public provider\n  public source     }\n    \n\nexport class mySettingsAxes {\n  public colLabel: string = \"grey\";\n  public textSize: number = 10;\n  public sizeTicks: string = \"8\";\n  public axisLine: boolean = false;\n\n}\n\nexport class LowerColumnValue1Format {\n  public colLabel: string = \"grey\";\n  public textLabel: boolean = false;\n  public labelColor: string = \"grey\"\n  public labelPlace: string = \"none\";\n  public fontSize: number = 12;\n}\n\nexport class LowerColumnValue2Format {\n  public colLabel: string = \"grey\";\n  public textLabel: boolean = false;\n  public labelColor: string = \"grey\"\n  public labelPlace: string = \"none\";\n  public fontSize: number = 12;\n}\n\nexport class LowerColumnValue3Format {\n  public colLabel: string = \"grey\";\n  public textLabel: boolean = false;\n  public labelColor: string = \"grey\"\n  public labelPlace: string = \"none\";\n  public fontSize: number = 12;\n}\n\nexport class LowerColumnValue4Format {\n  public colLabel: string = \"grey\";\n  public textLabel: boolean = false;\n  public labelColor: string = \"grey\"\n  public labelPlace: string = \"none\";\n  public fontSize: number = 12;\n}\n\nexport class LowerColumnValue5Format {\n  public colLabel: string = \"grey\";\n  public textLabel: boolean = false;\n  public labelColor: string = \"grey\"\n  public labelPlace: string = \"none\";\n  public fontSize: number = 12;\n}\n\nexport class UpperColumnValue1Format {\n  public colLabel: string = \"#FF0000\";\n  public textLabel: boolean = false;\n  public labelColor: string = \"grey\"\n  public labelPlace: string = \"none\";\n  public fontSize: number = 12;\n}\n\nexport class UpperColumnValue2Format {\n  public colLabel: string = \"grey\";\n  public textLabel: boolean = false;\n  public labelColor: string = \"grey\"\n  public labelPlace: string = \"none\";\n  public fontSize: number = 12;\n}\n\nexport class UpperColumnValue3Format {\n  public colLabel: string = \"grey\";\n  public textLabel: boolean = false;\n  public labelColor: string = \"grey\"\n  public labelPlace: string = \"none\";\n  public fontSize: number = 12;\n}\n\nexport class UpperColumnValue4Format {\n  public colLabel: string = \"grey\";\n  public textLabel: boolean = false;\n  public labelColor: string = \"grey\"\n  public labelPlace: string = \"none\";\n  public fontSize: number = 12;\n}\n\nexport class UpperColumnValue5Format {\n  public colLabel: string = \"grey\";\n  public textLabel: boolean = false;\n  public labelColor: string = \"grey\"\n  public labelPlace: string = \"none\";\n  public fontSize: number = 12;\n}","/*\n*  Power BI Visual CLI\n*\n*  Copyright (c) Microsoft Corporation\n*  All rights reserved.\n*  MIT License\n*\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal2\n*  in the Software without restriction, including without limitation the rights\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n*  copies of the Software, and to permit persons to whom the Software is\n*  furnished to do so, subject to the following conditions:\n*\n*  The above copyright notice and this permission notice shall be included in\n*  all copies or substantial portions of the Software.\n*\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n*  THE SOFTWARE.\n*/\n\"use strict\";\nimport powerbi from \"powerbi-visuals-api\";\nimport VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;\nimport VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;\nimport IVisual = powerbi.extensibility.visual.IVisual;\nimport EnumerateVisualObjectInstancesOptions = powerbi.EnumerateVisualObjectInstancesOptions;\nimport VisualObjectInstance = powerbi.VisualObjectInstance;\nimport DataView = powerbi.DataView;\nimport IViewport = powerbi.IViewport;\nimport VisualObjectInstanceEnumerationObject = powerbi.VisualObjectInstanceEnumerationObject;\n\nimport { VisualSettings } from \"./settings\";\nimport { parseElement, resetInjector, runHTMLWidgetRenderer } from \"./htmlInjectionUtility\";\n\nenum VisualUpdateType {\n    Data = 2,\n    Resize = 4,\n    ViewMode = 8,\n    Style = 16,\n    ResizeEnd = 32,\n    All = 62,\n}\n\n// below is a snippet of a definition for an object which will contain the property values\n// selected by the users\n/*interface VisualSettings {\n    lineColor: string;222s222222\n}*/\n\n// to allow this scenario you should first the following JSON definition to the capabilities.json file\n// under the \"objects\" property:\n// \"settings\": {\n//     \"displayName\": \"Visual Settings\",\n//     \"description\": \"Visual Settings Tooltip\",\n//     \"properties\": {\n//         \"lineColor\": {\n//         \"displayName\": \"Line Color\",\n//         \"type\": { \"fill\": { \"solid\": { \"color\": true }}}\n//         }\n//     }\n// }\n\n// in order to improve the performance, one can update the <head> only in the initial rendering.\n// set to 'true' if you are using different packages to create the widgets\nconst updateHTMLHead: boolean = false;\nconst renderVisualUpdateType: number[] = [\n    VisualUpdateType.Resize,\n    VisualUpdateType.ResizeEnd,\n    VisualUpdateType.Resize + VisualUpdateType.ResizeEnd\n];\n\nexport class Visual implements IVisual {\n    private rootElement: HTMLElement;\n    private headNodes: Node[];\n    private bodyNodes: Node[];\n    private settings: VisualSettings;\n\n    public constructor(options: VisualConstructorOptions) {\n        if (options && options.element) {\n            this.rootElement = options.element;\n        }\n        this.headNodes = [];\n        this.bodyNodes = [];\n    }\n\n    public update(options: VisualUpdateOptions): void {\n\n        if (!options ||\n            !options.type ||\n            !options.viewport ||\n            !options.dataViews ||\n            options.dataViews.length === 0 ||\n            !options.dataViews[0]) {\n            return;\n        }\n        const dataView: DataView = options.dataViews[0];\n        this.settings = Visual.parseSettings(dataView);\n\n        let payloadBase64: string = null;\n        if (dataView.scriptResult && dataView.scriptResult.payloadBase64) {\n            payloadBase64 = dataView.scriptResult.payloadBase64;\n        }\n\n        if (renderVisualUpdateType.indexOf(options.type) === -1) {\n            if (payloadBase64) {\n                this.injectCodeFromPayload(payloadBase64);\n            }\n        } else {\n            this.onResizing(options.viewport);\n        }\n    }\n\n    public onResizing(finalViewport: IViewport): void {\n        // tslint:disable-next-line\n        /* add code to handle resizing of the view port */\n    }\n\n    private injectCodeFromPayload(payloadBase64: string): void {\n        // inject HTML from payload, created in R\n        // the code is injected to the 'head' and 'body' sections.\n        // if the visual was already rendered, the previous DOM elements are cleared\n\n        resetInjector();\n\n        if (!payloadBase64) {\n            return;\n        }\n\n        // create 'virtual' HTML, so parsing is easier\n        let el: HTMLHtmlElement = document.createElement(\"html\");\n        try {\n            // tslint:disable-next-line\n            el.innerHTML = window.atob(payloadBase64);\n        } catch (err) {\n            return;\n        }\n\n        // if 'updateHTMLHead == false', then the code updates the header data only on the 1st rendering\n        // this option allows loading and parsing of large and recurring scripts only once.\n        if (updateHTMLHead || this.headNodes.length === 0) {\n            while (this.headNodes.length > 0) {\n                let tempNode: Node = this.headNodes.pop();\n                document.head.removeChild(tempNode);\n            }\n            let headList: HTMLCollectionOf<HTMLHeadElement> = el.getElementsByTagName(\"head\");\n            if (headList && headList.length > 0) {\n                let head: HTMLHeadElement = headList[0];\n                this.headNodes = parseElement(head, document.head);\n            }\n        }\n\n        // update 'body' nodes, under the rootElement\n        while (this.bodyNodes.length > 0) {\n            let tempNode: Node = this.bodyNodes.pop();\n            this.rootElement.removeChild(tempNode);\n        }\n        let bodyList: HTMLCollectionOf<HTMLBodyElement> = el.getElementsByTagName(\"body\");\n        if (bodyList && bodyList.length > 0) {\n            let body: HTMLBodyElement = bodyList[0];\n            this.bodyNodes = parseElement(body, this.rootElement);\n        }\n\n        runHTMLWidgetRenderer();\n    }\n\n    private static parseSettings(dataView: DataView): VisualSettings {\n        return <VisualSettings>VisualSettings.parse(dataView);\n    }\n\n    /**\n     * This function gets called for each of the objects defined in the capabilities files and allows you to select which of the\n     * objects and properties you want to expose to the users in the property pane.\n     *\n     */\n    public enumerateObjectInstances(options: EnumerateVisualObjectInstancesOptions):\n        VisualObjectInstance[] | VisualObjectInstanceEnumerationObject {\n        return VisualSettings.enumerateObjectInstances(this.settings || VisualSettings.getDefault(), options);\n    }\n}\n","export function getValue(object, propertyName, defaultValue) {\r\n    if (!object) {\r\n        return defaultValue;\r\n    }\r\n    let propertyValue = object[propertyName];\r\n    if (propertyValue === undefined) {\r\n        return defaultValue;\r\n    }\r\n    return propertyValue;\r\n}\r\n/** Gets the solid color from a fill property using only a propertyName */\r\nexport function getFillColorByPropertyName(object, propertyName, defaultColor) {\r\n    let value = getValue(object, propertyName);\r\n    if (!value || !value.solid) {\r\n        return defaultColor;\r\n    }\r\n    return value.solid.color;\r\n}\r\n//# sourceMappingURL=dataViewObject.js.map","import * as DataViewObject from \"./dataViewObject\";\r\n/** Gets the value of the given object/property pair. */\r\nexport function getValue(objects, propertyId, defaultValue) {\r\n    if (!objects) {\r\n        return defaultValue;\r\n    }\r\n    return DataViewObject.getValue(objects[propertyId.objectName], propertyId.propertyName, defaultValue);\r\n}\r\n/** Gets an object from objects. */\r\nexport function getObject(objects, objectName, defaultValue) {\r\n    if (objects && objects[objectName]) {\r\n        return objects[objectName];\r\n    }\r\n    return defaultValue;\r\n}\r\n/** Gets the solid color from a fill property. */\r\nexport function getFillColor(objects, propertyId, defaultColor) {\r\n    const value = getValue(objects, propertyId);\r\n    if (!value || !value.solid) {\r\n        return defaultColor;\r\n    }\r\n    return value.solid.color;\r\n}\r\nexport function getCommonValue(objects, propertyId, defaultValue) {\r\n    const value = getValue(objects, propertyId, defaultValue);\r\n    if (value && value.solid) {\r\n        return value.solid.color;\r\n    }\r\n    if (value === undefined\r\n        || value === null\r\n        || (typeof value === \"object\" && !value.solid)) {\r\n        return defaultValue;\r\n    }\r\n    return value;\r\n}\r\n//# sourceMappingURL=dataViewObjects.js.map","import * as DataViewObjects from \"./dataViewObjects\";\r\nexport class DataViewObjectsParser {\r\n    static getDefault() {\r\n        return new this();\r\n    }\r\n    static createPropertyIdentifier(objectName, propertyName) {\r\n        return {\r\n            objectName,\r\n            propertyName\r\n        };\r\n    }\r\n    static parse(dataView) {\r\n        let dataViewObjectParser = this.getDefault(), properties;\r\n        if (!dataView || !dataView.metadata || !dataView.metadata.objects) {\r\n            return dataViewObjectParser;\r\n        }\r\n        properties = dataViewObjectParser.getProperties();\r\n        for (let objectName in properties) {\r\n            for (let propertyName in properties[objectName]) {\r\n                const defaultValue = dataViewObjectParser[objectName][propertyName];\r\n                dataViewObjectParser[objectName][propertyName] = DataViewObjects.getCommonValue(dataView.metadata.objects, properties[objectName][propertyName], defaultValue);\r\n            }\r\n        }\r\n        return dataViewObjectParser;\r\n    }\r\n    static isPropertyEnumerable(propertyName) {\r\n        return !DataViewObjectsParser.InnumerablePropertyPrefix.test(propertyName);\r\n    }\r\n    static enumerateObjectInstances(dataViewObjectParser, options) {\r\n        let dataViewProperties = dataViewObjectParser && dataViewObjectParser[options.objectName];\r\n        if (!dataViewProperties) {\r\n            return [];\r\n        }\r\n        let instance = {\r\n            objectName: options.objectName,\r\n            selector: null,\r\n            properties: {}\r\n        };\r\n        for (let key in dataViewProperties) {\r\n            if (dataViewProperties.hasOwnProperty(key)) {\r\n                instance.properties[key] = dataViewProperties[key];\r\n            }\r\n        }\r\n        return {\r\n            instances: [instance]\r\n        };\r\n    }\r\n    getProperties() {\r\n        let properties = {}, objectNames = Object.keys(this);\r\n        objectNames.forEach((objectName) => {\r\n            if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {\r\n                let propertyNames = Object.keys(this[objectName]);\r\n                properties[objectName] = {};\r\n                propertyNames.forEach((propertyName) => {\r\n                    if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {\r\n                        properties[objectName][propertyName] =\r\n                            DataViewObjectsParser.createPropertyIdentifier(objectName, propertyName);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        return properties;\r\n    }\r\n}\r\nDataViewObjectsParser.InnumerablePropertyPrefix = /^_/;\r\n//# sourceMappingURL=dataViewObjectsParser.js.map","module.exports = Function('return this')();","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Visual } from \"../../src/visual\";\nimport powerbiVisualsApi from \"powerbi-visuals-api\";\nimport IVisualPlugin = powerbiVisualsApi.visuals.plugins.IVisualPlugin;\nimport VisualConstructorOptions = powerbiVisualsApi.extensibility.visual.VisualConstructorOptions;\nimport DialogConstructorOptions = powerbiVisualsApi.extensibility.visual.DialogConstructorOptions;\nvar powerbiKey: any = \"powerbi\";\nvar powerbi: any = window[powerbiKey];\nvar demoCreation522AEF1866B94124B4C4F588A968843A_DEBUG: IVisualPlugin = {\n    name: 'demoCreation522AEF1866B94124B4C4F588A968843A_DEBUG',\n    displayName: 'demoCreation',\n    class: 'Visual',\n    apiVersion: '3.8.0',\n    create: (options: VisualConstructorOptions) => {\n        if (Visual) {\n            return new Visual(options);\n        }\n        throw 'Visual instance not found';\n    },\n    createModalDialog: (dialogId: string, options: DialogConstructorOptions, initialState: object) => {\n        const dialogRegistry = globalThis.dialogRegistry;\n        if (dialogId in dialogRegistry) {\n            new dialogRegistry[dialogId](options, initialState);\n        }\n    },\n    custom: true\n};\nif (typeof powerbi !== \"undefined\") {\n    powerbi.visuals = powerbi.visuals || {};\n    powerbi.visuals.plugins = powerbi.visuals.plugins || {};\n    powerbi.visuals.plugins[\"demoCreation522AEF1866B94124B4C4F588A968843A_DEBUG\"] = demoCreation522AEF1866B94124B4C4F588A968843A_DEBUG;\n}\nexport default demoCreation522AEF1866B94124B4C4F588A968843A_DEBUG;"],"names":[],"sourceRoot":""}